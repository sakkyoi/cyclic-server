// Code generated by ent, DO NOT EDIT.

package plan

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the plan type in the database.
	Label = "plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldStartFrom holds the string denoting the start_from field in the database.
	FieldStartFrom = "start_from"
	// FieldDurationType holds the string denoting the duration_type field in the database.
	FieldDurationType = "duration_type"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAutoNotify holds the string denoting the auto_notify field in the database.
	FieldAutoNotify = "auto_notify"
	// EdgeHost holds the string denoting the host edge name in mutations.
	EdgeHost = "host"
	// Table holds the table name of the plan in the database.
	Table = "plans"
	// HostTable is the table that holds the host relation/edge.
	HostTable = "plans"
	// HostInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	HostInverseTable = "users"
	// HostColumn is the table column denoting the host relation/edge.
	HostColumn = "user_plans"
)

// Columns holds all SQL columns for plan fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldPrice,
	FieldStartFrom,
	FieldDurationType,
	FieldDuration,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAutoNotify,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "plans"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_plans",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// DurationType defines the type for the "duration_type" enum field.
type DurationType string

// DurationType values.
const (
	DurationTypeDays   DurationType = "days"
	DurationTypeMonths DurationType = "months"
	DurationTypeYears  DurationType = "years"
)

func (dt DurationType) String() string {
	return string(dt)
}

// DurationTypeValidator is a validator for the "duration_type" field enum values. It is called by the builders before save.
func DurationTypeValidator(dt DurationType) error {
	switch dt {
	case DurationTypeDays, DurationTypeMonths, DurationTypeYears:
		return nil
	default:
		return fmt.Errorf("plan: invalid enum value for duration_type field: %q", dt)
	}
}

// AutoNotify defines the type for the "auto_notify" enum field.
type AutoNotify string

// AutoNotifyAutomatic is the default value of the AutoNotify enum.
const DefaultAutoNotify = AutoNotifyAutomatic

// AutoNotify values.
const (
	AutoNotifyAutomatic AutoNotify = "automatic"
	AutoNotifyManual    AutoNotify = "manual"
)

func (an AutoNotify) String() string {
	return string(an)
}

// AutoNotifyValidator is a validator for the "auto_notify" field enum values. It is called by the builders before save.
func AutoNotifyValidator(an AutoNotify) error {
	switch an {
	case AutoNotifyAutomatic, AutoNotifyManual:
		return nil
	default:
		return fmt.Errorf("plan: invalid enum value for auto_notify field: %q", an)
	}
}

// OrderOption defines the ordering options for the Plan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByStartFrom orders the results by the start_from field.
func ByStartFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartFrom, opts...).ToFunc()
}

// ByDurationType orders the results by the duration_type field.
func ByDurationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationType, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAutoNotify orders the results by the auto_notify field.
func ByAutoNotify(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAutoNotify, opts...).ToFunc()
}

// ByHostField orders the results by host field.
func ByHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostStep(), sql.OrderByField(field, opts...))
	}
}
func newHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HostTable, HostColumn),
	)
}
