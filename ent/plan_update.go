// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cyclic/ent/plan"
	"cyclic/ent/predicate"
	"cyclic/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PlanUpdate is the builder for updating Plan entities.
type PlanUpdate struct {
	config
	hooks    []Hook
	mutation *PlanMutation
}

// Where appends a list predicates to the PlanUpdate builder.
func (pu *PlanUpdate) Where(ps ...predicate.Plan) *PlanUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlanUpdate) SetName(s string) *PlanUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableName(s *string) *PlanUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *PlanUpdate) SetDescription(s string) *PlanUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDescription(s *string) *PlanUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PlanUpdate) ClearDescription() *PlanUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetPrice sets the "price" field.
func (pu *PlanUpdate) SetPrice(f float64) *PlanUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(f)
	return pu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pu *PlanUpdate) SetNillablePrice(f *float64) *PlanUpdate {
	if f != nil {
		pu.SetPrice(*f)
	}
	return pu
}

// AddPrice adds f to the "price" field.
func (pu *PlanUpdate) AddPrice(f float64) *PlanUpdate {
	pu.mutation.AddPrice(f)
	return pu
}

// SetStartFrom sets the "start_from" field.
func (pu *PlanUpdate) SetStartFrom(t time.Time) *PlanUpdate {
	pu.mutation.SetStartFrom(t)
	return pu
}

// SetNillableStartFrom sets the "start_from" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableStartFrom(t *time.Time) *PlanUpdate {
	if t != nil {
		pu.SetStartFrom(*t)
	}
	return pu
}

// SetDurationType sets the "duration_type" field.
func (pu *PlanUpdate) SetDurationType(pt plan.DurationType) *PlanUpdate {
	pu.mutation.SetDurationType(pt)
	return pu
}

// SetNillableDurationType sets the "duration_type" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDurationType(pt *plan.DurationType) *PlanUpdate {
	if pt != nil {
		pu.SetDurationType(*pt)
	}
	return pu
}

// SetDuration sets the "duration" field.
func (pu *PlanUpdate) SetDuration(i int16) *PlanUpdate {
	pu.mutation.ResetDuration()
	pu.mutation.SetDuration(i)
	return pu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDuration(i *int16) *PlanUpdate {
	if i != nil {
		pu.SetDuration(*i)
	}
	return pu
}

// AddDuration adds i to the "duration" field.
func (pu *PlanUpdate) AddDuration(i int16) *PlanUpdate {
	pu.mutation.AddDuration(i)
	return pu
}

// SetStatus sets the "status" field.
func (pu *PlanUpdate) SetStatus(s string) *PlanUpdate {
	pu.mutation.SetStatus(s)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableStatus(s *string) *PlanUpdate {
	if s != nil {
		pu.SetStatus(*s)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PlanUpdate) SetUpdatedAt(t time.Time) *PlanUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetAutoNotify sets the "auto_notify" field.
func (pu *PlanUpdate) SetAutoNotify(pn plan.AutoNotify) *PlanUpdate {
	pu.mutation.SetAutoNotify(pn)
	return pu
}

// SetNillableAutoNotify sets the "auto_notify" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableAutoNotify(pn *plan.AutoNotify) *PlanUpdate {
	if pn != nil {
		pu.SetAutoNotify(*pn)
	}
	return pu
}

// SetHostID sets the "host" edge to the User entity by ID.
func (pu *PlanUpdate) SetHostID(id uuid.UUID) *PlanUpdate {
	pu.mutation.SetHostID(id)
	return pu
}

// SetHost sets the "host" edge to the User entity.
func (pu *PlanUpdate) SetHost(u *User) *PlanUpdate {
	return pu.SetHostID(u.ID)
}

// Mutation returns the PlanMutation object of the builder.
func (pu *PlanUpdate) Mutation() *PlanMutation {
	return pu.mutation
}

// ClearHost clears the "host" edge to the User entity.
func (pu *PlanUpdate) ClearHost() *PlanUpdate {
	pu.mutation.ClearHost()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlanUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlanUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := plan.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlanUpdate) check() error {
	if v, ok := pu.mutation.DurationType(); ok {
		if err := plan.DurationTypeValidator(v); err != nil {
			return &ValidationError{Name: "duration_type", err: fmt.Errorf(`ent: validator failed for field "Plan.duration_type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.AutoNotify(); ok {
		if err := plan.AutoNotifyValidator(v); err != nil {
			return &ValidationError{Name: "auto_notify", err: fmt.Errorf(`ent: validator failed for field "Plan.auto_notify": %w`, err)}
		}
	}
	if _, ok := pu.mutation.HostID(); pu.mutation.HostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Plan.host"`)
	}
	return nil
}

func (pu *PlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(plan.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(plan.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(plan.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.AddField(plan.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.StartFrom(); ok {
		_spec.SetField(plan.FieldStartFrom, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DurationType(); ok {
		_spec.SetField(plan.FieldDurationType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Duration(); ok {
		_spec.SetField(plan.FieldDuration, field.TypeInt16, value)
	}
	if value, ok := pu.mutation.AddedDuration(); ok {
		_spec.AddField(plan.FieldDuration, field.TypeInt16, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(plan.FieldStatus, field.TypeString, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.AutoNotify(); ok {
		_spec.SetField(plan.FieldAutoNotify, field.TypeEnum, value)
	}
	if pu.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.HostTable,
			Columns: []string{plan.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.HostTable,
			Columns: []string{plan.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlanUpdateOne is the builder for updating a single Plan entity.
type PlanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlanMutation
}

// SetName sets the "name" field.
func (puo *PlanUpdateOne) SetName(s string) *PlanUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableName(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *PlanUpdateOne) SetDescription(s string) *PlanUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDescription(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PlanUpdateOne) ClearDescription() *PlanUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetPrice sets the "price" field.
func (puo *PlanUpdateOne) SetPrice(f float64) *PlanUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(f)
	return puo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillablePrice(f *float64) *PlanUpdateOne {
	if f != nil {
		puo.SetPrice(*f)
	}
	return puo
}

// AddPrice adds f to the "price" field.
func (puo *PlanUpdateOne) AddPrice(f float64) *PlanUpdateOne {
	puo.mutation.AddPrice(f)
	return puo
}

// SetStartFrom sets the "start_from" field.
func (puo *PlanUpdateOne) SetStartFrom(t time.Time) *PlanUpdateOne {
	puo.mutation.SetStartFrom(t)
	return puo
}

// SetNillableStartFrom sets the "start_from" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableStartFrom(t *time.Time) *PlanUpdateOne {
	if t != nil {
		puo.SetStartFrom(*t)
	}
	return puo
}

// SetDurationType sets the "duration_type" field.
func (puo *PlanUpdateOne) SetDurationType(pt plan.DurationType) *PlanUpdateOne {
	puo.mutation.SetDurationType(pt)
	return puo
}

// SetNillableDurationType sets the "duration_type" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDurationType(pt *plan.DurationType) *PlanUpdateOne {
	if pt != nil {
		puo.SetDurationType(*pt)
	}
	return puo
}

// SetDuration sets the "duration" field.
func (puo *PlanUpdateOne) SetDuration(i int16) *PlanUpdateOne {
	puo.mutation.ResetDuration()
	puo.mutation.SetDuration(i)
	return puo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDuration(i *int16) *PlanUpdateOne {
	if i != nil {
		puo.SetDuration(*i)
	}
	return puo
}

// AddDuration adds i to the "duration" field.
func (puo *PlanUpdateOne) AddDuration(i int16) *PlanUpdateOne {
	puo.mutation.AddDuration(i)
	return puo
}

// SetStatus sets the "status" field.
func (puo *PlanUpdateOne) SetStatus(s string) *PlanUpdateOne {
	puo.mutation.SetStatus(s)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableStatus(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetStatus(*s)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PlanUpdateOne) SetUpdatedAt(t time.Time) *PlanUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetAutoNotify sets the "auto_notify" field.
func (puo *PlanUpdateOne) SetAutoNotify(pn plan.AutoNotify) *PlanUpdateOne {
	puo.mutation.SetAutoNotify(pn)
	return puo
}

// SetNillableAutoNotify sets the "auto_notify" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableAutoNotify(pn *plan.AutoNotify) *PlanUpdateOne {
	if pn != nil {
		puo.SetAutoNotify(*pn)
	}
	return puo
}

// SetHostID sets the "host" edge to the User entity by ID.
func (puo *PlanUpdateOne) SetHostID(id uuid.UUID) *PlanUpdateOne {
	puo.mutation.SetHostID(id)
	return puo
}

// SetHost sets the "host" edge to the User entity.
func (puo *PlanUpdateOne) SetHost(u *User) *PlanUpdateOne {
	return puo.SetHostID(u.ID)
}

// Mutation returns the PlanMutation object of the builder.
func (puo *PlanUpdateOne) Mutation() *PlanMutation {
	return puo.mutation
}

// ClearHost clears the "host" edge to the User entity.
func (puo *PlanUpdateOne) ClearHost() *PlanUpdateOne {
	puo.mutation.ClearHost()
	return puo
}

// Where appends a list predicates to the PlanUpdate builder.
func (puo *PlanUpdateOne) Where(ps ...predicate.Plan) *PlanUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlanUpdateOne) Select(field string, fields ...string) *PlanUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Plan entity.
func (puo *PlanUpdateOne) Save(ctx context.Context) (*Plan, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanUpdateOne) SaveX(ctx context.Context) *Plan {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlanUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlanUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := plan.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlanUpdateOne) check() error {
	if v, ok := puo.mutation.DurationType(); ok {
		if err := plan.DurationTypeValidator(v); err != nil {
			return &ValidationError{Name: "duration_type", err: fmt.Errorf(`ent: validator failed for field "Plan.duration_type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.AutoNotify(); ok {
		if err := plan.AutoNotifyValidator(v); err != nil {
			return &ValidationError{Name: "auto_notify", err: fmt.Errorf(`ent: validator failed for field "Plan.auto_notify": %w`, err)}
		}
	}
	if _, ok := puo.mutation.HostID(); puo.mutation.HostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Plan.host"`)
	}
	return nil
}

func (puo *PlanUpdateOne) sqlSave(ctx context.Context) (_node *Plan, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Plan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plan.FieldID)
		for _, f := range fields {
			if !plan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(plan.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(plan.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(plan.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.AddField(plan.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.StartFrom(); ok {
		_spec.SetField(plan.FieldStartFrom, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DurationType(); ok {
		_spec.SetField(plan.FieldDurationType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Duration(); ok {
		_spec.SetField(plan.FieldDuration, field.TypeInt16, value)
	}
	if value, ok := puo.mutation.AddedDuration(); ok {
		_spec.AddField(plan.FieldDuration, field.TypeInt16, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(plan.FieldStatus, field.TypeString, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.AutoNotify(); ok {
		_spec.SetField(plan.FieldAutoNotify, field.TypeEnum, value)
	}
	if puo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.HostTable,
			Columns: []string{plan.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.HostTable,
			Columns: []string{plan.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Plan{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
