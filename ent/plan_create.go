// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cyclic/ent/plan"
	"cyclic/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// PlanCreate is the builder for creating a Plan entity.
type PlanCreate struct {
	config
	mutation *PlanMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *PlanCreate) SetName(s string) *PlanCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *PlanCreate) SetDescription(s string) *PlanCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PlanCreate) SetNillableDescription(s *string) *PlanCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetPrice sets the "price" field.
func (pc *PlanCreate) SetPrice(f float64) *PlanCreate {
	pc.mutation.SetPrice(f)
	return pc
}

// SetStartFrom sets the "start_from" field.
func (pc *PlanCreate) SetStartFrom(t time.Time) *PlanCreate {
	pc.mutation.SetStartFrom(t)
	return pc
}

// SetDurationType sets the "duration_type" field.
func (pc *PlanCreate) SetDurationType(pt plan.DurationType) *PlanCreate {
	pc.mutation.SetDurationType(pt)
	return pc
}

// SetDuration sets the "duration" field.
func (pc *PlanCreate) SetDuration(i int16) *PlanCreate {
	pc.mutation.SetDuration(i)
	return pc
}

// SetStatus sets the "status" field.
func (pc *PlanCreate) SetStatus(s string) *PlanCreate {
	pc.mutation.SetStatus(s)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PlanCreate) SetCreatedAt(t time.Time) *PlanCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableCreatedAt(t *time.Time) *PlanCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PlanCreate) SetUpdatedAt(t time.Time) *PlanCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableUpdatedAt(t *time.Time) *PlanCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetAutoNotify sets the "auto_notify" field.
func (pc *PlanCreate) SetAutoNotify(pn plan.AutoNotify) *PlanCreate {
	pc.mutation.SetAutoNotify(pn)
	return pc
}

// SetNillableAutoNotify sets the "auto_notify" field if the given value is not nil.
func (pc *PlanCreate) SetNillableAutoNotify(pn *plan.AutoNotify) *PlanCreate {
	if pn != nil {
		pc.SetAutoNotify(*pn)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PlanCreate) SetID(u uuid.UUID) *PlanCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PlanCreate) SetNillableID(u *uuid.UUID) *PlanCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// SetHostID sets the "host" edge to the User entity by ID.
func (pc *PlanCreate) SetHostID(id uuid.UUID) *PlanCreate {
	pc.mutation.SetHostID(id)
	return pc
}

// SetHost sets the "host" edge to the User entity.
func (pc *PlanCreate) SetHost(u *User) *PlanCreate {
	return pc.SetHostID(u.ID)
}

// Mutation returns the PlanMutation object of the builder.
func (pc *PlanCreate) Mutation() *PlanMutation {
	return pc.mutation
}

// Save creates the Plan in the database.
func (pc *PlanCreate) Save(ctx context.Context) (*Plan, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanCreate) SaveX(ctx context.Context) *Plan {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlanCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlanCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlanCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := plan.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := plan.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.AutoNotify(); !ok {
		v := plan.DefaultAutoNotify
		pc.mutation.SetAutoNotify(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := plan.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlanCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Plan.name"`)}
	}
	if _, ok := pc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Plan.price"`)}
	}
	if _, ok := pc.mutation.StartFrom(); !ok {
		return &ValidationError{Name: "start_from", err: errors.New(`ent: missing required field "Plan.start_from"`)}
	}
	if _, ok := pc.mutation.DurationType(); !ok {
		return &ValidationError{Name: "duration_type", err: errors.New(`ent: missing required field "Plan.duration_type"`)}
	}
	if v, ok := pc.mutation.DurationType(); ok {
		if err := plan.DurationTypeValidator(v); err != nil {
			return &ValidationError{Name: "duration_type", err: fmt.Errorf(`ent: validator failed for field "Plan.duration_type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Plan.duration"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Plan.status"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Plan.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Plan.updated_at"`)}
	}
	if _, ok := pc.mutation.AutoNotify(); !ok {
		return &ValidationError{Name: "auto_notify", err: errors.New(`ent: missing required field "Plan.auto_notify"`)}
	}
	if v, ok := pc.mutation.AutoNotify(); ok {
		if err := plan.AutoNotifyValidator(v); err != nil {
			return &ValidationError{Name: "auto_notify", err: fmt.Errorf(`ent: validator failed for field "Plan.auto_notify": %w`, err)}
		}
	}
	if _, ok := pc.mutation.HostID(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required edge "Plan.host"`)}
	}
	return nil
}

func (pc *PlanCreate) sqlSave(ctx context.Context) (*Plan, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlanCreate) createSpec() (*Plan, *sqlgraph.CreateSpec) {
	var (
		_node = &Plan{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(plan.Table, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(plan.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Price(); ok {
		_spec.SetField(plan.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := pc.mutation.StartFrom(); ok {
		_spec.SetField(plan.FieldStartFrom, field.TypeTime, value)
		_node.StartFrom = value
	}
	if value, ok := pc.mutation.DurationType(); ok {
		_spec.SetField(plan.FieldDurationType, field.TypeEnum, value)
		_node.DurationType = value
	}
	if value, ok := pc.mutation.Duration(); ok {
		_spec.SetField(plan.FieldDuration, field.TypeInt16, value)
		_node.Duration = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(plan.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(plan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.AutoNotify(); ok {
		_spec.SetField(plan.FieldAutoNotify, field.TypeEnum, value)
		_node.AutoNotify = value
	}
	if nodes := pc.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.HostTable,
			Columns: []string{plan.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_plans = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlanCreateBulk is the builder for creating many Plan entities in bulk.
type PlanCreateBulk struct {
	config
	err      error
	builders []*PlanCreate
}

// Save creates the Plan entities in the database.
func (pcb *PlanCreateBulk) Save(ctx context.Context) ([]*Plan, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Plan, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlanCreateBulk) SaveX(ctx context.Context) []*Plan {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlanCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlanCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
