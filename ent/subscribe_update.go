// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cyclic/ent/predicate"
	"cyclic/ent/subscribe"
	"cyclic/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SubscribeUpdate is the builder for updating Subscribe entities.
type SubscribeUpdate struct {
	config
	hooks    []Hook
	mutation *SubscribeMutation
}

// Where appends a list predicates to the SubscribeUpdate builder.
func (su *SubscribeUpdate) Where(ps ...predicate.Subscribe) *SubscribeUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSubscribedAt sets the "subscribed_at" field.
func (su *SubscribeUpdate) SetSubscribedAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetSubscribedAt(t)
	return su
}

// SetNillableSubscribedAt sets the "subscribed_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableSubscribedAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetSubscribedAt(*t)
	}
	return su
}

// SetLeftAt sets the "left_at" field.
func (su *SubscribeUpdate) SetLeftAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetLeftAt(t)
	return su
}

// SetNillableLeftAt sets the "left_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableLeftAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetLeftAt(*t)
	}
	return su
}

// ClearLeftAt clears the value of the "left_at" field.
func (su *SubscribeUpdate) ClearLeftAt() *SubscribeUpdate {
	su.mutation.ClearLeftAt()
	return su
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (su *SubscribeUpdate) AddUserIDs(ids ...uuid.UUID) *SubscribeUpdate {
	su.mutation.AddUserIDs(ids...)
	return su
}

// AddUsers adds the "users" edges to the User entity.
func (su *SubscribeUpdate) AddUsers(u ...*User) *SubscribeUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.AddUserIDs(ids...)
}

// Mutation returns the SubscribeMutation object of the builder.
func (su *SubscribeUpdate) Mutation() *SubscribeMutation {
	return su.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (su *SubscribeUpdate) ClearUsers() *SubscribeUpdate {
	su.mutation.ClearUsers()
	return su
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (su *SubscribeUpdate) RemoveUserIDs(ids ...uuid.UUID) *SubscribeUpdate {
	su.mutation.RemoveUserIDs(ids...)
	return su
}

// RemoveUsers removes "users" edges to User entities.
func (su *SubscribeUpdate) RemoveUsers(u ...*User) *SubscribeUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscribeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscribeUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscribeUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscribeUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SubscribeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscribe.Table, subscribe.Columns, sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SubscribedAt(); ok {
		_spec.SetField(subscribe.FieldSubscribedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.LeftAt(); ok {
		_spec.SetField(subscribe.FieldLeftAt, field.TypeTime, value)
	}
	if su.mutation.LeftAtCleared() {
		_spec.ClearField(subscribe.FieldLeftAt, field.TypeTime)
	}
	if su.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscribe.UsersTable,
			Columns: subscribe.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedUsersIDs(); len(nodes) > 0 && !su.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscribe.UsersTable,
			Columns: subscribe.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscribe.UsersTable,
			Columns: subscribe.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscribeUpdateOne is the builder for updating a single Subscribe entity.
type SubscribeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscribeMutation
}

// SetSubscribedAt sets the "subscribed_at" field.
func (suo *SubscribeUpdateOne) SetSubscribedAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetSubscribedAt(t)
	return suo
}

// SetNillableSubscribedAt sets the "subscribed_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableSubscribedAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetSubscribedAt(*t)
	}
	return suo
}

// SetLeftAt sets the "left_at" field.
func (suo *SubscribeUpdateOne) SetLeftAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetLeftAt(t)
	return suo
}

// SetNillableLeftAt sets the "left_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableLeftAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetLeftAt(*t)
	}
	return suo
}

// ClearLeftAt clears the value of the "left_at" field.
func (suo *SubscribeUpdateOne) ClearLeftAt() *SubscribeUpdateOne {
	suo.mutation.ClearLeftAt()
	return suo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (suo *SubscribeUpdateOne) AddUserIDs(ids ...uuid.UUID) *SubscribeUpdateOne {
	suo.mutation.AddUserIDs(ids...)
	return suo
}

// AddUsers adds the "users" edges to the User entity.
func (suo *SubscribeUpdateOne) AddUsers(u ...*User) *SubscribeUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.AddUserIDs(ids...)
}

// Mutation returns the SubscribeMutation object of the builder.
func (suo *SubscribeUpdateOne) Mutation() *SubscribeMutation {
	return suo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (suo *SubscribeUpdateOne) ClearUsers() *SubscribeUpdateOne {
	suo.mutation.ClearUsers()
	return suo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (suo *SubscribeUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *SubscribeUpdateOne {
	suo.mutation.RemoveUserIDs(ids...)
	return suo
}

// RemoveUsers removes "users" edges to User entities.
func (suo *SubscribeUpdateOne) RemoveUsers(u ...*User) *SubscribeUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the SubscribeUpdate builder.
func (suo *SubscribeUpdateOne) Where(ps ...predicate.Subscribe) *SubscribeUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscribeUpdateOne) Select(field string, fields ...string) *SubscribeUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscribe entity.
func (suo *SubscribeUpdateOne) Save(ctx context.Context) (*Subscribe, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscribeUpdateOne) SaveX(ctx context.Context) *Subscribe {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscribeUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscribeUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SubscribeUpdateOne) sqlSave(ctx context.Context) (_node *Subscribe, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscribe.Table, subscribe.Columns, sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subscribe.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscribe.FieldID)
		for _, f := range fields {
			if !subscribe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscribe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.SubscribedAt(); ok {
		_spec.SetField(subscribe.FieldSubscribedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.LeftAt(); ok {
		_spec.SetField(subscribe.FieldLeftAt, field.TypeTime, value)
	}
	if suo.mutation.LeftAtCleared() {
		_spec.ClearField(subscribe.FieldLeftAt, field.TypeTime)
	}
	if suo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscribe.UsersTable,
			Columns: subscribe.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !suo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscribe.UsersTable,
			Columns: subscribe.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscribe.UsersTable,
			Columns: subscribe.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subscribe{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
