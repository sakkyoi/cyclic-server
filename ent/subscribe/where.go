// Code generated by ent, DO NOT EDIT.

package subscribe

import (
	"cyclic/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLTE(FieldID, id))
}

// SubscribedAt applies equality check predicate on the "subscribed_at" field. It's identical to SubscribedAtEQ.
func SubscribedAt(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldSubscribedAt, v))
}

// LeftAt applies equality check predicate on the "left_at" field. It's identical to LeftAtEQ.
func LeftAt(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldLeftAt, v))
}

// SubscribedAtEQ applies the EQ predicate on the "subscribed_at" field.
func SubscribedAtEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldSubscribedAt, v))
}

// SubscribedAtNEQ applies the NEQ predicate on the "subscribed_at" field.
func SubscribedAtNEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNEQ(FieldSubscribedAt, v))
}

// SubscribedAtIn applies the In predicate on the "subscribed_at" field.
func SubscribedAtIn(vs ...time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldIn(FieldSubscribedAt, vs...))
}

// SubscribedAtNotIn applies the NotIn predicate on the "subscribed_at" field.
func SubscribedAtNotIn(vs ...time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNotIn(FieldSubscribedAt, vs...))
}

// SubscribedAtGT applies the GT predicate on the "subscribed_at" field.
func SubscribedAtGT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGT(FieldSubscribedAt, v))
}

// SubscribedAtGTE applies the GTE predicate on the "subscribed_at" field.
func SubscribedAtGTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGTE(FieldSubscribedAt, v))
}

// SubscribedAtLT applies the LT predicate on the "subscribed_at" field.
func SubscribedAtLT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLT(FieldSubscribedAt, v))
}

// SubscribedAtLTE applies the LTE predicate on the "subscribed_at" field.
func SubscribedAtLTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLTE(FieldSubscribedAt, v))
}

// LeftAtEQ applies the EQ predicate on the "left_at" field.
func LeftAtEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldEQ(FieldLeftAt, v))
}

// LeftAtNEQ applies the NEQ predicate on the "left_at" field.
func LeftAtNEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNEQ(FieldLeftAt, v))
}

// LeftAtIn applies the In predicate on the "left_at" field.
func LeftAtIn(vs ...time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldIn(FieldLeftAt, vs...))
}

// LeftAtNotIn applies the NotIn predicate on the "left_at" field.
func LeftAtNotIn(vs ...time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNotIn(FieldLeftAt, vs...))
}

// LeftAtGT applies the GT predicate on the "left_at" field.
func LeftAtGT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGT(FieldLeftAt, v))
}

// LeftAtGTE applies the GTE predicate on the "left_at" field.
func LeftAtGTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldGTE(FieldLeftAt, v))
}

// LeftAtLT applies the LT predicate on the "left_at" field.
func LeftAtLT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLT(FieldLeftAt, v))
}

// LeftAtLTE applies the LTE predicate on the "left_at" field.
func LeftAtLTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(sql.FieldLTE(FieldLeftAt, v))
}

// LeftAtIsNil applies the IsNil predicate on the "left_at" field.
func LeftAtIsNil() predicate.Subscribe {
	return predicate.Subscribe(sql.FieldIsNull(FieldLeftAt))
}

// LeftAtNotNil applies the NotNil predicate on the "left_at" field.
func LeftAtNotNil() predicate.Subscribe {
	return predicate.Subscribe(sql.FieldNotNull(FieldLeftAt))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subscribe) predicate.Subscribe {
	return predicate.Subscribe(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subscribe) predicate.Subscribe {
	return predicate.Subscribe(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subscribe) predicate.Subscribe {
	return predicate.Subscribe(sql.NotPredicates(p))
}
