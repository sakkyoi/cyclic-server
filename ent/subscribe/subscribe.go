// Code generated by ent, DO NOT EDIT.

package subscribe

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the subscribe type in the database.
	Label = "subscribe"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSubscribedAt holds the string denoting the subscribed_at field in the database.
	FieldSubscribedAt = "subscribed_at"
	// FieldLeftAt holds the string denoting the left_at field in the database.
	FieldLeftAt = "left_at"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the subscribe in the database.
	Table = "subscribes"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "subscribe_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
)

// Columns holds all SQL columns for subscribe fields.
var Columns = []string{
	FieldID,
	FieldSubscribedAt,
	FieldLeftAt,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"subscribe_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSubscribedAt holds the default value on creation for the "subscribed_at" field.
	DefaultSubscribedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Subscribe queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySubscribedAt orders the results by the subscribed_at field.
func BySubscribedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscribedAt, opts...).ToFunc()
}

// ByLeftAt orders the results by the left_at field.
func ByLeftAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLeftAt, opts...).ToFunc()
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
	)
}
