// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cyclic/ent/subscribe"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Subscribe is the model entity for the Subscribe schema.
type Subscribe struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SubscribedAt holds the value of the "subscribed_at" field.
	SubscribedAt time.Time `json:"subscribed_at,omitempty"`
	// LeftAt holds the value of the "left_at" field.
	LeftAt time.Time `json:"left_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscribeQuery when eager-loading is set.
	Edges        SubscribeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubscribeEdges holds the relations/edges for other nodes in the graph.
type SubscribeEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e SubscribeEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subscribe) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscribe.FieldSubscribedAt, subscribe.FieldLeftAt:
			values[i] = new(sql.NullTime)
		case subscribe.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subscribe fields.
func (s *Subscribe) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscribe.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case subscribe.FieldSubscribedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field subscribed_at", values[i])
			} else if value.Valid {
				s.SubscribedAt = value.Time
			}
		case subscribe.FieldLeftAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field left_at", values[i])
			} else if value.Valid {
				s.LeftAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subscribe.
// This includes values selected through modifiers, order, etc.
func (s *Subscribe) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the Subscribe entity.
func (s *Subscribe) QueryUsers() *UserQuery {
	return NewSubscribeClient(s.config).QueryUsers(s)
}

// Update returns a builder for updating this Subscribe.
// Note that you need to call Subscribe.Unwrap() before calling this method if this Subscribe
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subscribe) Update() *SubscribeUpdateOne {
	return NewSubscribeClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subscribe entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subscribe) Unwrap() *Subscribe {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subscribe is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subscribe) String() string {
	var builder strings.Builder
	builder.WriteString("Subscribe(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("subscribed_at=")
	builder.WriteString(s.SubscribedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("left_at=")
	builder.WriteString(s.LeftAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Subscribes is a parsable slice of Subscribe.
type Subscribes []*Subscribe
