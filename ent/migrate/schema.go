// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// LinksColumns holds the columns for the "links" table.
	LinksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"email", "telegram", "line"}},
		{Name: "address", Type: field.TypeString},
		{Name: "user_links", Type: field.TypeUUID},
	}
	// LinksTable holds the schema information for the "links" table.
	LinksTable = &schema.Table{
		Name:       "links",
		Columns:    LinksColumns,
		PrimaryKey: []*schema.Column{LinksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "links_users_links",
				Columns:    []*schema.Column{LinksColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PlansColumns holds the columns for the "plans" table.
	PlansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 1000},
		{Name: "price", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(9,2)", "postgres": "numeric"}},
		{Name: "start_from", Type: field.TypeTime},
		{Name: "duration_type", Type: field.TypeEnum, Enums: []string{"days", "months", "years"}},
		{Name: "duration", Type: field.TypeInt16},
		{Name: "status", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "auto_notify", Type: field.TypeEnum, Enums: []string{"automatic", "manual"}, Default: "automatic"},
		{Name: "user_plans", Type: field.TypeUUID},
	}
	// PlansTable holds the schema information for the "plans" table.
	PlansTable = &schema.Table{
		Name:       "plans",
		Columns:    PlansColumns,
		PrimaryKey: []*schema.Column{PlansColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "plans_users_plans",
				Columns:    []*schema.Column{PlansColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SubscribesColumns holds the columns for the "subscribes" table.
	SubscribesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "subscribed_at", Type: field.TypeTime},
		{Name: "left_at", Type: field.TypeTime, Nullable: true},
	}
	// SubscribesTable holds the schema information for the "subscribes" table.
	SubscribesTable = &schema.Table{
		Name:       "subscribes",
		Columns:    SubscribesColumns,
		PrimaryKey: []*schema.Column{SubscribesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "username", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "password", Type: field.TypeBytes, Nullable: true},
		{Name: "email", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "name", Type: field.TypeString, Default: "unknown"},
		{Name: "role", Type: field.TypeString, Default: "user"},
		{Name: "active", Type: field.TypeBool, Default: false},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// SubscribeUsersColumns holds the columns for the "subscribe_users" table.
	SubscribeUsersColumns = []*schema.Column{
		{Name: "subscribe_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// SubscribeUsersTable holds the schema information for the "subscribe_users" table.
	SubscribeUsersTable = &schema.Table{
		Name:       "subscribe_users",
		Columns:    SubscribeUsersColumns,
		PrimaryKey: []*schema.Column{SubscribeUsersColumns[0], SubscribeUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subscribe_users_subscribe_id",
				Columns:    []*schema.Column{SubscribeUsersColumns[0]},
				RefColumns: []*schema.Column{SubscribesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "subscribe_users_user_id",
				Columns:    []*schema.Column{SubscribeUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		LinksTable,
		PlansTable,
		SubscribesTable,
		UsersTable,
		SubscribeUsersTable,
	}
)

func init() {
	LinksTable.ForeignKeys[0].RefTable = UsersTable
	PlansTable.ForeignKeys[0].RefTable = UsersTable
	SubscribeUsersTable.ForeignKeys[0].RefTable = SubscribesTable
	SubscribeUsersTable.ForeignKeys[1].RefTable = UsersTable
}
